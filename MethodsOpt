def f1(x1, x2):
    return 2 * x1 - x2 + 1

def f2(x1, x2):
    return 16 * x2 - x1

def f3(x01, x02, x1, x2, alf):
    return (-x1)*2*(x01-x1*alf)-16*x2*(x02-x2*alf)-x01*x2-x02*x1+2*alf*x1*x2-x1

def funct(x1, x2):
    return x1 * x1 + 8 * x2 * x2 - x1 * x2 + x1
x, e1, e2, n = {'x1':float(input()), 'x2':float(input())}, float(input()), float(input()), int(input())
k = 0
ans = {}
prev = {}
grad={}
while k < n:
    print(k+1, "-ая итерация:")
    print("Ответ на начало цикла: ", ans)
    print("Начальный вектор: ", x)
    grad['x1'] = f1(x['x1'], x['x2'])
    grad['x2'] = f2(x['x1'], x['x2'])
    print("Знаечние градиента: ", grad)
    prev['x1'] = x['x1']
    prev['x2'] = x['x2']
    if max(x['x1'], x['x2']) < e1:
        print("Первое условие выхода выполнено")
        ans = grad
        print(x)
        print(ans)
        k=n
    else:
        a = 0
        eps = 0.001
        b = 1
        si = 0.1
        iterat = 0
        while(a + b) / 2 > eps and iterat < 1000:
            mid = (a + b) / 2;
            if (f3(x['x1'], x['x2'], grad['x1'], grad['x2'], mid - si) < f3(x['x1'], x['x2'],grad['x1'], grad['x2'], mid + si)):
                a = mid - si
            else:
                b = mid + si
            iterat+=1
        print(iterat)
        print(a, b)
        minim = (a + b) / 2
        print("Альфа = ", minim)
        x['x1'] -= grad['x1'] * minim
        x['x2'] -= grad['x2'] * minim
        print(x)
        if max((x['x1']-prev['x1']),(x['x2']-prev['x2']))<e2 and abs(funct(x['x1'], x['x2']) - funct(prev['x1'], prev['x2']))<e2:
            ans=x
            k=n
            print("Второе условие выхода выполнено")
        else:
            k+=1
print ("Ответ после цикла: ", ans)
if ans==0:
    ans = x;
print(ans)

            
