#include<math.h>
#include <iostream>

using namespace std;

#define dim 2

double f(double* x) {
	return x[0] * x[0] + 8 * x[1] * x[1] - x[0] * x[1] + x[0];
}

double* gradf(double* x) { // вектор градиента
	double* g = new double[dim];
	g[0] = 2 * x[0] - x[1] + 1;
	g[1] = 16 * x[1] - x[0];

	return g;
}

double fi(double tk, double* xk, double* dk) { // функция ф(tk), минимум которой станет величиной шага
	double* arg_f = new double[dim];
	for (int i = 0; i < dim; ++i) {
		arg_f[i] = xk[i] + tk * dk[i];
	}

	return f(arg_f);

}

double** gesse_matrix(double* x) { // Матрица Гессе
	double** h = new double* [dim];
	for (int i = 0; i < dim; ++i)
		h[i] = new double[dim];

	h[0][0] = 2; h[0][1] = -1;
	h[1][0] = -1; h[1][1] = 16;

	return h;
}

double* negative(double* x) {
	double* z = new double[dim];
	for (int i = 0; i < dim; ++i) {
		z[i] = -x[i];
	}
	return z;
}

// функция поиска минимума методом дихотомии
double findmin_bisect(double func(double arg, double* _vec, double* _vec2), double* vec, double* vec2, double a = 0.0, double b = 1.0, double eps = 0.0001, double delta = 0.00004) {
	double x, y;

	do {
		x = (a + b - delta) / 2;
		y = (a + b + delta) / 2;
		double fx = func(x, vec, vec2), fy = func(y, vec, vec2);

		if (fx < fy) {
			b = y;
		}
		else if (fx > fy) {
			a = x;
		}
		else if (fx == fy) {
			a = x;
			b = y;
		}

	} while (abs(b - a) >= 2 * eps);

	return (a + b) / 2;
}

double* minus_vec(double* x, double* y) {
	double* z = new double[dim];
	for (int i = 0; i < dim; ++i) {
		z[i] = x[i] - y[i];
	}
	return z;
}

double Norm2(double* x) {
	double s = 0;
	for (int i = 0; i < dim; ++i) {
		s += x[i] * x[i];
	}
	return s;
}

double** matr_invert(double** a, int n) {
	double** e = new double* [n];
	for (int i = 0; i < n; ++i)
		e[i] = new double[n];

	double det = a[0][0] * a[1][1] - a[0][1] * a[1][0];

	e[0][0] = a[1][1] / det; e[0][1] = -a[0][1] / det;
	e[1][0] = -a[1][0] / det; e[1][1] = a[0][0] / det;

	return e;
}

double* matr_times_vector(double** matr, double* vec, int matr_str, int matr_col) {
	double* res = new double[matr_str];
	for (int i = 0; i < matr_str; ++i) {
		double sum = 0.0;
		for (int k = 0; k < matr_col; ++k) {
			sum += matr[i][k] * vec[k];
		}
		res[i] = sum;
	}

	return res;
}

int main()
{
	setlocale(LC_ALL, "rus");

	//ШАГ 1

	int M = 15;
	double eps1 = 0.01;
	double eps2 = 0.1;

	//ШАГ 2

	int k = 0;

	//ШАГ 3

	double xk[dim] = { -1.2, 1.0 };
	double xkp1[dim];

	double* gradf_xk = gradf(xk);
	double* gradf_xkm1 = new double[dim];

	//ШАГ 4, 5

	bool k_ge_M = (k >= M),
		NormAbs_l_eps2 = false,
		NormGrad_l_eps1 = sqrt(Norm2(gradf_xk)) < eps1;

	bool first_satisfied = false;

	if (!(NormGrad_l_eps1 || k_ge_M)) {

		//ШАГ 6



		double* dk = new double[dim];


		double** matr_gess = matr_invert(gesse_matrix(xk), dim);
		do {

			dk = negative(matr_times_vector(matr_gess, gradf_xk, 2, 2));

			for (int i = 0; i < dim; ++i) {
				xkp1[i] = xk[i] + dk[i];
			}

			k++;
			gradf_xk = gradf(xkp1);

			// ШАГ 11



			k_ge_M = (k >= M);
			NormGrad_l_eps1 = (sqrt(Norm2(gradf_xk)) < eps1);

			if (sqrt(Norm2(minus_vec(xkp1, xk))) < eps2 &&
				abs(f(xkp1) - f(xk)) < eps2) {

				if (!(first_satisfied)) first_satisfied = true;
				else NormAbs_l_eps2 = true;

			}
			else if (first_satisfied) first_satisfied = false;

			for (int i = 0; i < dim; ++i) {
				xk[i] = xkp1[i];
			}

		} 
		while (!(NormGrad_l_eps1 || k_ge_M || NormAbs_l_eps2));

		for (int i = 0; i < dim; ++i)
			delete[] matr_gess[i];
	}

	cout << "Точка минимума: ( ";
	for (int i = 0; i < dim; ++i) {
		cout << xk[i] << " ";
	}
	cout << ")\nЗначение функции в этой точке = " << f(xk) << ";\n";

	cout << "\nКоличество шагов: " << k << "\n";

	system("pause");
	return 0;
}

